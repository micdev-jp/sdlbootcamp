# 2. VehicleSignal Document
SDLBOOTCAMPに車両情報を通知するためのシミュレータ

## 2.1 動作確認環境
<dl>
  <dt>Ubuntu16.04 LTS</dt>
  <dd>Python : 3.5.2</dd>
  <dd>python-OBD : 0.7.0</dd>
  <dd>websocket-client : 0.56.0</dd>
  <dd>OBD2アダプタ : ELM327 USB(SsSlct)</dd>
</dl>


## 2.2 通信仕様

<dl>
  <dt>SDLBOOTCAMP側仕様</dt>
  <dd>無線仕様 : Wi-Fi direct [IEEE 802.11b/g/n]</dd>
  <dd>IPアドレス : 10.0.0.1</dd>
  <dd>ポート番号 : 固定(8088)</dd>
	<dd>SSID : sdlbootcamp </dd>
	<dd>暗号キー : sdlbootcamp </dd>
</dl>


## 2.3 サンプルソースコード
OBD2_tp.py
```
#!/usr/bin/env python3

import sys
import time
import websocket
import obd
import json

BC_IP_ADDR = "10.0.0.1"
BC_PORT_NUM = "8088"

webSocket = None
obd2Connection = None

def Finalize():
  global webSocket
  global obd2Connection

  if None != webSocket:
    webSocket.close()

  if None != obd2Connection:
    obd2Connection.close()


if __name__ == "__main__":

  # WebSocket connect
  webSocket = websocket.WebSocket()
  webSocket.connect("ws://" + BC_IP_ADDR + ":" + BC_PORT_NUM + "/")
  if False == webSocket.connected:
    print("[ERR] WebSocket Connection Error")
    Finalize()
    sys.exit()

  # OBD2 connect
  obd2Connection = obd.OBD()
  if obd.OBDStatus.CAR_CONNECTED != obd2Connection.status():
    print("[ERR] Please connect the OBD2 adapter to the car")
    Finalize()
    sys.exit()

  for i in range(5):
    # OBD2 get param
    speedObj = obd2Connection.query( obd.commands.SPEED );
    if None == speedObj.value:
      print("[ERR] [SPEED] Get Error")
      Finalize()
      sys.exit()

    throttleObj = obd2Connection.query( obd.commands.THROTTLE_POS )
    if None == throttleObj.value:
      print("[ERR] [THROTTLE_POS] Get Error")
      Finalize()
      sys.exit()

    # Send to SDL BOOT CAMP
    speed = speedObj.value.magnitude
    throttlePos = throttleObj.value.magnitude

    sendData = json.dumps( {"VehicleData": {"speed":speed, "accPedalPosition":throttlePos} })
    # print( sendData )
    webSocket.send( sendData )

    # 500msec
    time.sleep(0.5)

  # Exit
  Finalize()
```

## 2.4 サンプルプログラム確認手順
1. 実車、ubuntu-PC を OBD2アダプタ で接続
1. SDLBOOTCAMP と PC を wifi接続
1. サンプルプログラム起動し、SDLBOOTCAMPのログから速度、アクセルペダル位置が取得できることを確認

	* サンプルプログラム起動方法
		```
		$ python3 OBD2_tp.py
		```



## 参考情報
### python3環境構築(ubuntu 16.04(64bit))
```
$ sudo apt-get install python3-pip
$ pip3 install websocket-client
$ pip3 install obd
```
### python-OBD詳細情報
[https://python-obd.readthedocs.io/en/latest/](https://python-obd.readthedocs.io/en/latest/)

### 実装済みパラメータ
SDL-CORE Ver4.5.1 に準拠している。
以下は、JSONフォーマット。

VehicleData
- speed  
float型、0〜700(1.0e-1)

- prndl  
string型、以下から選択。
  - PARK
  - REVERSE
  - NEUTRAL
  - DRIVE
  - SPORT
  - LOWGEAR
  - FIRST
  - SECOND
  - THIRD
  - FOURTH
  - FIFTH
  - SIXTH
  - SEVENTH
  - EIGHTH
  - UNKNOWN
  - FAULT

- gps
  - longitudeDegrees  
  float型、-180〜180(1.0e-5)
  - latitudeDegrees  
  float型、-90〜90(1.0e-5)
  - utcYear  
  int型、2010〜2100
  - utcMonth  
  int型、1〜12
  - utcDay  
  int型、1〜31
  - utcHours  
  int型、0〜23
  - utcMinutes  
  int型、0〜59
  - utcSeconds  
  int型、0〜59
  - compassDirection  
  string型、以下から選択。
    - NORTH
    - NORTHWEST
    - WEST
    - SOUTHWEST
    - SOUTH
    - SOUTHEAST
    - EAST
    - NORTHEAST
  - pdop  
  float型、0〜1000(1.0e-2)
  - hdop  
  float型、0〜1000(1.0e-2)
  - vdop  
  float型、0〜1000(1.0e-2)
  - actual  
  bool型
  - satellites  
  int型、0〜31
  - dimension  
  string型、以下から選択。
    - NO_FIX
    - 2D
    - 3D
  - altitude  
  float型、-10000〜10000(1.0e-1)
  - heading  
  float型、0〜359.99(1.0e-2)
  - speed  
  float型、0〜500(1.0e-1)

- bodyInformation
  - parkBrakeActive  
  bool型
  - ignitionStableStatus  
  string型、以下から選択。
    - IGNITION_SWITCH_NOT_STABLE
    - IGNITION_SWITCH_STABLE
    - MISSING_FROM_TRANSMITTER
  - ignitionStatus  
  string型、以下から選択。
    - UNKNOWN
    - OFF
    - ACCESSORY
    - RUN
    - START
    - INVALID
  - driverDoorAjar  
  string型、以下から選択。
    - None
    - false
    - true
  - passengerDoorAjar  
  string型、以下から選択。
    - None
    - false
    - true
  - rearLeftDoorAjar  
  string型、以下から選択。
    - None
    - false
    - true
  - rearRightDoorAjar  
  string型、以下から選択。
    - None
    - false
    - true

- headLampStatus
  - lowBeamsOn  
  bool型
  - highBeamsOn  
  bool型
  - ambientLightSensorStatus  
  string型、以下から選択。
    - NIGHT
    - TWILIGHT_1
    - TWILIGHT_2
    - TWILIGHT_3
    - TWILIGHT_4
    - DAY
    - UNKNOWN
    - INVALID

- accPedalPosition  
float型、0〜100(1.0e-1)
